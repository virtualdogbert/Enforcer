buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
    }
}

plugins {
    id 'maven-publish'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'idea'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

version '3.0.0'
group 'io.github.virtualdogbert'

apply plugin:'org.grails.grails-plugin'


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    maven { url 'https://repo.grails.org/grails/core' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'

    implementation 'org.grails:grails-web-boot'
    implementation 'org.grails:grails-dependencies'
    implementation 'javax.servlet:javax.servlet-api:3.1.0'
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

def asciidoctorAttributes = [
        copyright           : 'Apache License, Version 2.0',
        docinfo1            : 'true',
        doctype             : 'book',
        encoding            : 'utf-8',
        icons               : 'font',
        id                  : project.name + ':' + project.version,
        idprefix            : '',
        idseparator         : '-',
        lang                : 'en',
        linkattrs           : true,
        numbered            : '',
        producer            : 'Asciidoctor',
        revnumber           : project.version,
        setanchors          : true,
        'source-highlighter': 'prettify',
        toc                 : 'left',
        toc2                : '',
        toclevels           : '2'
]

asciidoctor {
  sourceDir  file('src/docs')
  outputDir  file('build/docs')
    baseDirFollowsSourceDir()

    asciidoctorj {
        attributes = asciidoctorAttributes
    }
}

publishing {
    publications {
        maven(MavenPublication) {

            groupId = project.group
            artifactId = 'enforcer'
            version = project.version

            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Enforcer'
                description = 'A plugin for enforcing business rules/permissions, that works with Spring Security Core, is easier to implement, and extend. It can also be used as an alternative to Spring Security ACL'
                url = 'https://github.com/virtualdogbert/Enforcer'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'virtualdogbert'
                        name = 'Tucker J. Pelletier'
                        email = 'virtualdogbert@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/virtualdogbert/Enforcer.git'
                    developerConnection = 'scm:git:ssh://github.com:virtualdogbert/Enforcer.git'
                    url = 'https://github.com/virtualdogbert/Enforcer/tree/master'
                }
            }

            repositories {
                    maven {
                        url = gitHubMavenRepo
                        credentials {
                            username = project.findProperty("gpr.user") ?: userName
                            password = project.findProperty("gpr.key") ?: accessToken
                        }
                    }
                }
        }


    }
}


nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            password = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            stagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
        }
    }
}
